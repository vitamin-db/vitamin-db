//babelify vs reactify

=================
index.js
=================

- browserify -- bundles multiple files together to minimize http requests, has many options to bundle various ways

- express - create a server / handles server stuff

- Path - is a native Node.js module, contains utilities for handling and transforming file paths.

- Middleware - middleware functions are functions that have access to the request objects (req and res), and the next middleware function in the req/res cycle. All to do with requests.

routes.get('/app-bundle.js',
  browserify('./client/app.js'))

  - finds /client/app.js and compiles into app-bundle.js, which is loaded into the browser

Express router
	- A router obj is an "isolated instance of middleware and routes"
	- Can think of it like a "mini-app", capable only of performing middleware and routing function.
	- ** Every Express app has a built-in app router **
	- ACTION: Keep looking into express routers -- not completely clear on their purpose / delineation between them and an app instance, etc.

var app = express()
	-- Creating an instance of express (1 main instance for the app)
	-- uses body-parser module to parse incoming request bodies as JSON
	- mounts the main router (defined by us earlier in the file)

=================
Work on DB 
=================

We did:
1. initdb db/
2. createdb med_dev

To run:
1. In one terminal window, run "postgres -D db/"
	- Leave the process running.
2. In another terminal window, run "psql med_dev". 
	- This is the window to interact with the db. 


Phone numbers - integer or string?
Validatoin for email addresses


=================
Seed DB
=================

1. Drop the database
	//=> 'dropdb med_dev'
2. Create the database
	//=> 'createdb med_dev'
3. Start the database, and leave running.
	//=>  'psql med_dev'
4. In separate terminal window, start the server, which will initialize the schema.
	//=>  'npm start'
5. In separate terminal window, seed the db.
	//=>  'knex --env development seed:run'


===============
Set Up Test Database (will only have to run this once on your computer)
===============

1. Drop the database (if exists)
   //=> 'dropdb test'
2. Create the database
   //=> 'createdb test'
3. Initialize the schema: 
   //=> 'NODE_ENV=test node server/index.js'
4. Quit out of Node
   //=> CTRL + c
Can now run tests: 'npm test'

=========
Notes 3/4
========

need to write functionality to run seeding
started writing server tests in index_test.js 
- need to get db.deleteEverything() working properly, if it is not
- migrations not working for unknown reasons
May be running test envirionment; alternatively, node may be working/not working sporadically with no correlation to our actions


======
Notes 3/5
=====

Working on getting a User model to:
1) instantiate based on model-helper prototype
2) flow into test correctly
3) pass tests
- once this works, structure should be able to be copied and used by other models


=====
Notes 3/8
=====
Other methods to write:
- User: get all doctors associated with user << User.findAllDoctors; User.findAllDoctorsOfType
- Doctor: given an array of doctors, filter out types
- ** need some way for users to enter doctors in the order they went to them... can't do it by 'created at'